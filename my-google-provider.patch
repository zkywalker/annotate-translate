From dde0c58a8456ad401976fa671b3b9dc462edc6d5 Mon Sep 17 00:00:00 2001
From: zkywalker <zkywalker@users.noreply.github.com>
Date: Wed, 15 Oct 2025 07:09:07 +0000
Subject: [PATCH] =?UTF-8?q?feat:=20=E6=B7=BB=E5=8A=A0=20Google=20=E7=BF=BB?=
 =?UTF-8?q?=E8=AF=91=E6=8F=90=E4=BE=9B=E8=80=85=E9=85=8D=E7=BD=AE=E5=92=8C?=
 =?UTF-8?q?=E6=8C=89=E9=92=AE=EF=BC=8C=E5=A2=9E=E5=BC=BA=E7=94=A8=E6=88=B7?=
 =?UTF-8?q?=E7=95=8C=E9=9D=A2=E4=BA=A4=E4=BA=92?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 _locales/en/messages.json    |  18 ++-
 _locales/zh_CN/messages.json |  18 ++-
 content.js                   | 241 ++++++++++++++++++++++++++---------
 options.html                 |  85 ++++++++++++
 options.js                   |  49 +++++++
 5 files changed, 348 insertions(+), 63 deletions(-)

diff --git a/_locales/en/messages.json b/_locales/en/messages.json
index db5354c..76d17ea 100644
--- a/_locales/en/messages.json
+++ b/_locales/en/messages.json
@@ -571,6 +571,22 @@
   "languageChangedReload": {
     "message": "Language changed! Reloading page...",
     "description": "Message shown when language is changed"
+  },
+  
+  "setAsCurrentService": {
+    "message": "Set as Current Service",
+    "description": "Button text to set as current translation service"
+  },
+  "currentService": {
+    "message": "Current Service",
+    "description": "Label for current active service"
+  },
+  "googleInfo": {
+    "message": "Google Translate Information",
+    "description": "Google Translate information title"
+  },
+  "googleInfoDesc": {
+    "message": "Google Translate is a free service and does not require API configuration. It is ready to use immediately.",
+    "description": "Google Translate information description"
   }
 }
-
diff --git a/_locales/zh_CN/messages.json b/_locales/zh_CN/messages.json
index b72c6b8..d3b7d7f 100644
--- a/_locales/zh_CN/messages.json
+++ b/_locales/zh_CN/messages.json
@@ -571,6 +571,22 @@
   "languageChangedReload": {
     "message": "语言已更改！正在重新加载页面...",
     "description": "Message shown when language is changed"
+  },
+  
+  "setAsCurrentService": {
+    "message": "设为当前服务",
+    "description": "Button text to set as current translation service"
+  },
+  "currentService": {
+    "message": "当前服务",
+    "description": "Label for current active service"
+  },
+  "googleInfo": {
+    "message": "Google 翻译信息",
+    "description": "Google Translate information title"
+  },
+  "googleInfoDesc": {
+    "message": "Google 翻译是免费服务，无需 API 配置，可立即使用。",
+    "description": "Google Translate information description"
   }
 }
-
diff --git a/content.js b/content.js
index 6c39196..e01f803 100644
--- a/content.js
+++ b/content.js
@@ -1,5 +1,17 @@
 // Content Script for Annotate Translate Extension
 
+/**
+ * 检查扩展上下文是否有效
+ * @returns {boolean} 如果扩展上下文有效返回 true
+ */
+function isExtensionContextValid() {
+  try {
+    return chrome.runtime && chrome.runtime.id !== undefined;
+  } catch (e) {
+    return false;
+  }
+}
+
 /**
  * 安全获取 i18n 消息，避免扩展上下文失效错误
  * @param {string} key - 消息 key
@@ -55,6 +67,12 @@ init();
 function init() {
   console.log('[Annotate-Translate] Content script loaded on:', window.location.href);
   
+  // 检查扩展上下文
+  if (!isExtensionContextValid()) {
+    console.error('[Annotate-Translate] Extension context is invalid, script will not initialize');
+    return;
+  }
+  
   // 检查翻译服务是否可用
   if (typeof translationService === 'undefined') {
     console.error('[Annotate-Translate] Translation service not loaded!');
@@ -64,47 +82,63 @@ function init() {
   console.log('[Annotate-Translate] Translation service available:', translationService);
   
   // Load settings from storage
-  chrome.storage.sync.get({
-    enableTranslate: false,
-    enableAnnotate: true,
-    targetLanguage: 'zh-CN',
-    translationProvider: 'google',
-    youdaoAppKey: '',
-    youdaoAppSecret: '',
-    deeplApiKey: '',
-    deeplUseFreeApi: true,
-    openaiApiKey: '',
-    openaiModel: 'gpt-3.5-turbo',
-    openaiBaseUrl: 'https://api.openai.com/v1',
-    openaiPromptFormat: 'jsonFormat',
-    openaiUseContext: true,
-    enablePhoneticFallback: true,
-    enableAudio: true,
-    showPhonetics: true,
-    showDefinitions: true,
-    showExamples: true,
-    maxExamples: 3,
-    showPhoneticInAnnotation: true,
-    menuButtonSize: 'small',
-    enableCache: true,
-    cacheSize: 100,
-    debugMode: false,
-    showConsoleLogs: false
-  }, function(items) {
-    settings = items;
-    console.log('[Annotate-Translate] Settings loaded:', settings);
-    
-    // 如果 debug 模式关闭但提供者是 debug，则切换到 google
-    if (settings.translationProvider === 'debug' && !settings.debugMode) {
-      console.log('[Annotate-Translate] Debug mode is off but provider is debug, switching to google');
-      settings.translationProvider = 'google';
-      // 更新存储
-      chrome.storage.sync.set({ translationProvider: 'google' });
-    }
-    
-    // 应用设置到翻译服务
-    applyTranslationSettings();
-  });
+  try {
+    chrome.storage.sync.get({
+      enableTranslate: false,
+      enableAnnotate: true,
+      targetLanguage: 'zh-CN',
+      translationProvider: 'google',
+      youdaoAppKey: '',
+      youdaoAppSecret: '',
+      deeplApiKey: '',
+      deeplUseFreeApi: true,
+      openaiApiKey: '',
+      openaiModel: 'gpt-3.5-turbo',
+      openaiBaseUrl: 'https://api.openai.com/v1',
+      openaiPromptFormat: 'jsonFormat',
+      openaiUseContext: true,
+      enablePhoneticFallback: true,
+      enableAudio: true,
+      showPhonetics: true,
+      showDefinitions: true,
+      showExamples: true,
+      maxExamples: 3,
+      showPhoneticInAnnotation: true,
+      menuButtonSize: 'small',
+      enableCache: true,
+      cacheSize: 100,
+      debugMode: false,
+      showConsoleLogs: false
+    }, function(items) {
+      // Check if context is still valid in callback
+      if (chrome.runtime.lastError) {
+        console.error('[Annotate-Translate] Failed to load settings:', chrome.runtime.lastError.message);
+        return;
+      }
+      
+      settings = items;
+      console.log('[Annotate-Translate] Settings loaded:', settings);
+      
+      // 如果 debug 模式关闭但提供者是 debug，则切换到 google
+      if (settings.translationProvider === 'debug' && !settings.debugMode) {
+        console.log('[Annotate-Translate] Debug mode is off but provider is debug, switching to google');
+        settings.translationProvider = 'google';
+        // 更新存储
+        if (isExtensionContextValid()) {
+          chrome.storage.sync.set({ translationProvider: 'google' }, function() {
+            if (chrome.runtime.lastError) {
+              console.warn('[Annotate-Translate] Failed to update provider:', chrome.runtime.lastError.message);
+            }
+          });
+        }
+      }
+      
+      // 应用设置到翻译服务
+      applyTranslationSettings();
+    });
+  } catch (error) {
+    console.error('[Annotate-Translate] Error loading settings:', error.message);
+  }
 
   // 初始化TranslationUI
   initializeTranslationUI();
@@ -141,17 +175,49 @@ function applyTranslationSettings() {
     return;
   }
   
+  // 打印所有已注册的 providers
+  console.log('[Annotate-Translate] Registered providers:', Array.from(translationService.providers.keys()));
+  console.log('[Annotate-Translate] Requested provider:', settings.translationProvider);
+  
   // 设置活跃的翻译提供商
   if (settings.translationProvider) {
     // 检查 provider 是否存在
     if (!translationService.providers.has(settings.translationProvider)) {
       console.warn(`[Annotate-Translate] Provider "${settings.translationProvider}" not found, falling back to google`);
       settings.translationProvider = 'google';
-      chrome.storage.sync.set({ translationProvider: 'google' });
+      if (isExtensionContextValid()) {
+        try {
+          chrome.storage.sync.set({ translationProvider: 'google' }, function() {
+            if (chrome.runtime.lastError) {
+              console.warn('[Annotate-Translate] Failed to update provider:', chrome.runtime.lastError.message);
+            }
+          });
+        } catch (error) {
+          console.warn('[Annotate-Translate] Failed to update provider:', error.message);
+        }
+      }
     }
     
-    translationService.setActiveProvider(settings.translationProvider);
-    console.log('[Annotate-Translate] Provider set to:', settings.translationProvider);
+    try {
+      translationService.setActiveProvider(settings.translationProvider);
+      console.log('[Annotate-Translate] Provider set to:', settings.translationProvider);
+    } catch (error) {
+      console.error('[Annotate-Translate] Failed to set provider:', error);
+      // 出错时回退到 google
+      settings.translationProvider = 'google';
+      translationService.setActiveProvider('google');
+      if (isExtensionContextValid()) {
+        try {
+          chrome.storage.sync.set({ translationProvider: 'google' }, function() {
+            if (chrome.runtime.lastError) {
+              console.warn('[Annotate-Translate] Failed to update provider:', chrome.runtime.lastError.message);
+            }
+          });
+        } catch (error) {
+          console.warn('[Annotate-Translate] Failed to update provider:', error.message);
+        }
+      }
+    }
     
     // 如果是 Google 提供商，更新其配置
     if (settings.translationProvider === 'google') {
@@ -1046,16 +1112,39 @@ function getAudioCacheStats() {
 
 // Save annotation to storage
 function saveAnnotation(baseText, annotationText) {
-  chrome.storage.local.get({annotations: []}, function(result) {
-    const annotations = result.annotations;
-    annotations.push({
-      baseText: baseText,
-      annotationText: annotationText || '',
-      timestamp: Date.now(),
-      url: window.location.href
+  // Check if extension context is still valid
+  if (!chrome.runtime?.id) {
+    console.warn('[Annotate-Translate] Extension context invalidated, skipping annotation save');
+    return;
+  }
+  
+  try {
+    chrome.storage.local.get({annotations: []}, function(result) {
+      // Check for chrome.runtime.lastError
+      if (chrome.runtime.lastError) {
+        console.warn('[Annotate-Translate] Failed to save annotation:', chrome.runtime.lastError.message);
+        return;
+      }
+      
+      const annotations = result.annotations;
+      annotations.push({
+        baseText: baseText,
+        annotationText: annotationText || '',
+        timestamp: Date.now(),
+        url: window.location.href
+      });
+      
+      chrome.storage.local.set({annotations: annotations}, function() {
+        if (chrome.runtime.lastError) {
+          console.warn('[Annotate-Translate] Failed to save annotation:', chrome.runtime.lastError.message);
+        }
+      });
     });
-    chrome.storage.local.set({annotations: annotations});
-  });
+  } catch (error) {
+    // Silently handle extension context invalidation
+    // The annotation is already created in the DOM, so this is not a critical error
+    console.warn('[Annotate-Translate] Failed to save annotation:', error.message);
+  }
 }
 
 // Handle messages from popup or background
@@ -1066,14 +1155,34 @@ function handleMessage(request, sender, sendResponse) {
     // Respond to ping to confirm content script is loaded
     sendResponse({pong: true});
   } else if (request.action === 'updateSettings') {
-    // 更新设置
-    settings = request.settings || settings;
-    console.log('[Annotate-Translate] Settings updated:', settings);
-    
-    // 重新应用翻译设置
-    applyTranslationSettings();
+    // 从 storage 重新加载所有设置（而不是只使用消息中的部分设置）
+    if (!isExtensionContextValid()) {
+      sendResponse({success: false, error: 'Extension context invalidated'});
+      return true;
+    }
     
-    sendResponse({success: true});
+    try {
+      chrome.storage.sync.get(null, function(items) {
+        if (chrome.runtime.lastError) {
+          console.error('[Annotate-Translate] Failed to reload settings:', chrome.runtime.lastError.message);
+          sendResponse({success: false, error: chrome.runtime.lastError.message});
+          return;
+        }
+        
+        settings = Object.assign({}, settings, items);
+        console.log('[Annotate-Translate] Settings reloaded from storage:', settings);
+        
+        // 重新应用翻译设置
+        applyTranslationSettings();
+        
+        sendResponse({success: true});
+      });
+    } catch (error) {
+      console.error('[Annotate-Translate] Error reloading settings:', error.message);
+      sendResponse({success: false, error: error.message});
+    }
+    // 返回 true 表示异步响应
+    return true;
   } else if (request.action === 'clearCache') {
     // 清除翻译缓存
     if (typeof translationService !== 'undefined') {
@@ -1179,5 +1288,15 @@ function clearAllAnnotations() {
   annotations.clear();
   
   // Clear from storage
-  chrome.storage.local.set({annotations: []});
+  if (isExtensionContextValid()) {
+    try {
+      chrome.storage.local.set({annotations: []}, function() {
+        if (chrome.runtime.lastError) {
+          console.warn('[Annotate-Translate] Failed to clear annotations from storage:', chrome.runtime.lastError.message);
+        }
+      });
+    } catch (error) {
+      console.warn('[Annotate-Translate] Failed to clear annotations from storage:', error.message);
+    }
+  }
 }
diff --git a/options.html b/options.html
index c99c574..b756c30 100644
--- a/options.html
+++ b/options.html
@@ -248,6 +248,55 @@
       background: #5a6268;
     }
 
+    /* Set Provider Button */
+    .set-provider-btn {
+      padding: 10px 20px;
+      border: 2px solid #667eea;
+      border-radius: 6px;
+      background: white;
+      color: #667eea;
+      font-size: 14px;
+      font-weight: 500;
+      cursor: pointer;
+      transition: all 0.3s;
+      display: inline-flex;
+      align-items: center;
+      gap: 8px;
+    }
+
+    .set-provider-btn:hover:not(.active) {
+      background: #667eea;
+      color: white;
+      transform: translateY(-2px);
+      box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
+    }
+
+    .set-provider-btn.active {
+      background: #667eea;
+      color: white;
+      border-color: #667eea;
+      cursor: default;
+      pointer-events: none;
+    }
+
+    .set-provider-btn.active .btn-icon {
+      display: inline-block;
+      animation: checkPulse 0.5s ease;
+    }
+
+    .set-provider-btn:not(.active) .btn-icon {
+      display: none;
+    }
+
+    .set-provider-btn.active .btn-text::before {
+      content: attr(data-i18n-active);
+    }
+
+    @keyframes checkPulse {
+      0%, 100% { transform: scale(1); }
+      50% { transform: scale(1.2); }
+    }
+
     .btn-danger {
       background: #dc3545;
       color: white;
@@ -614,6 +663,21 @@
           </div>
         </div>
 
+        <!-- Google 翻译说明 -->
+        <div class="setting-item" id="googleConfigSection" style="display: none;">
+          <label>🌐 <span data-i18n="googleTranslate">Google Translate</span></label>
+          <div class="info-box" style="margin-top: 15px;">
+            <strong>ℹ️ <span data-i18n="googleInfo">Google Translate Information:</span></strong><br>
+            <span data-i18n="googleInfoDesc">Google Translate is a free service and does not require API configuration. It is ready to use immediately.</span>
+          </div>
+          <div style="margin-top: 15px;">
+            <button type="button" class="set-provider-btn" data-provider="google">
+              <span class="btn-icon">✓</span>
+              <span class="btn-text" data-i18n="setAsCurrentService">Set as Current Service</span>
+            </button>
+          </div>
+        </div>
+
         <!-- Youdao API 配置 -->
         <div class="setting-item" id="youdaoConfigSection" style="display: none;">
           <label>📖 <span data-i18n="youdaoConfig">Youdao API Configuration</span></label>
@@ -643,6 +707,13 @@
             <span data-i18n="credentialsStep4">4. Get your App Key and App Secret</span><br>
             <span data-i18n="credentialsStep5">5. Copy them to the fields above and save</span>
           </div>
+
+          <div style="margin-top: 15px;">
+            <button type="button" class="set-provider-btn" data-provider="youdao">
+              <span class="btn-icon">✓</span>
+              <span class="btn-text" data-i18n="setAsCurrentService">Set as Current Service</span>
+            </button>
+          </div>
         </div>
 
         <!-- DeepL API 配置 -->
@@ -676,6 +747,13 @@
             <span data-i18n="deeplCredentialsStep4">4. Free tier includes 500,000 characters/month</span><br>
             <span data-i18n="deeplCredentialsStep5">5. Copy your API key to the field above and save</span>
           </div>
+
+          <div style="margin-top: 15px;">
+            <button type="button" class="set-provider-btn" data-provider="deepl">
+              <span class="btn-icon">✓</span>
+              <span class="btn-text" data-i18n="setAsCurrentService">Set as Current Service</span>
+            </button>
+          </div>
         </div>
 
         <!-- OpenAI API 配置 -->
@@ -728,6 +806,13 @@
             <span>• LocalAI, Ollama (local models)</span><br>
             <span>• Third-party OpenAI proxies</span>
           </div>
+
+          <div style="margin-top: 15px;">
+            <button type="button" class="set-provider-btn" data-provider="openai">
+              <span class="btn-icon">✓</span>
+              <span class="btn-text" data-i18n="setAsCurrentService">Set as Current Service</span>
+            </button>
+          </div>
         </div>
       </div>
 
diff --git a/options.js b/options.js
index 194e251..63ac9cf 100644
--- a/options.js
+++ b/options.js
@@ -62,6 +62,7 @@ const elements = {
   enableAnnotate: document.getElementById('enableAnnotate'),
   uiLanguage: document.getElementById('uiLanguage'),
   targetLanguage: document.getElementById('targetLanguage'),
+  googleConfigSection: document.getElementById('googleConfigSection'),
   youdaoAppKey: document.getElementById('youdaoAppKey'),
   youdaoAppSecret: document.getElementById('youdaoAppSecret'),
   youdaoConfigSection: document.getElementById('youdaoConfigSection'),
@@ -416,6 +417,13 @@ function updateProviderSelection(provider) {
     selectedItem.closest('.radio-item').classList.add('selected');
   }
   
+  // Show/hide Google config section
+  if (provider === 'google') {
+    elements.googleConfigSection.style.display = 'block';
+  } else {
+    elements.googleConfigSection.style.display = 'none';
+  }
+  
   // Show/hide Youdao config section
   if (provider === 'youdao') {
     elements.youdaoConfigSection.style.display = 'block';
@@ -443,6 +451,31 @@ function updateProviderSelection(provider) {
   } else {
     elements.debugProviderDesc.style.display = 'none';
   }
+  
+  // Update set provider buttons state
+  updateSetProviderButtons(provider);
+}
+
+/**
+ * Update set provider buttons active state
+ */
+function updateSetProviderButtons(activeProvider) {
+  document.querySelectorAll('.set-provider-btn').forEach(btn => {
+    const btnProvider = btn.getAttribute('data-provider');
+    if (btnProvider === activeProvider) {
+      btn.classList.add('active');
+      const btnText = btn.querySelector('.btn-text');
+      if (btnText) {
+        btnText.textContent = i18n('currentService');
+      }
+    } else {
+      btn.classList.remove('active');
+      const btnText = btn.querySelector('.btn-text');
+      if (btnText) {
+        btnText.textContent = i18n('setAsCurrentService');
+      }
+    }
+  });
 }
 
 /**
@@ -1014,6 +1047,22 @@ function setupEventListeners() {
     editIcon.addEventListener('click', openDialog);
   }
   
+  // Set provider button click handlers
+  document.querySelectorAll('.set-provider-btn').forEach((btn) => {
+    btn.addEventListener('click', (e) => {
+      const provider = btn.getAttribute('data-provider');
+      if (provider) {
+        // Find and check the corresponding radio button
+        const radio = document.querySelector(`input[name="provider"][value="${provider}"]`);
+        if (radio && !radio.checked) {
+          radio.checked = true;
+          updateProviderSelection(provider);
+          autoSaveSettings();
+        }
+      }
+    });
+  });
+  
   // Initialize Lucide icons after adding edit icons
   if (typeof lucide !== 'undefined') {
     lucide.createIcons();
-- 
2.50.1

